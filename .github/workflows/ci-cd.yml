
name: CICD

on:
  push:
    branches: [ demos/main ]
  pull_request:
    branches: [ demos/main ]

# Use github.event.repository.id to have a unique value per repo to avoid conflicts of multiple
# repositories deploying this sample. It's kind of hackish, but works for sample purposes and 
# avoids manual replacements by users. Under normal circumstances, you would use a constant.
env:
  ResourceGroupName: MyShuttle-${{ github.event.repository.id }}-${{ github.job }}
  SiteName: MyShuttle-${{ github.event.repository.id }}-${{ github.job }}
  dbServerName: MyShuttle-${{ github.event.repository.id }}-${{ github.job }}-mysql
  dbUser: dbuser
  artifactsName: artifacts
  integration_tests_path: ${{ github.workspace}}/tests/integration

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '8'
        cache: 'maven'

    - name: Build with Maven
      run: mvn -B package cobertura:cobertura --file pom.xml -DskipITs --batch-mode --quiet

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always() && github.actor != 'dependabot[bot]'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        check_name: Tests Results
        files: '**/surefire-reports/TEST-*.xml'
        report_individual_runs: true
        deduplicate_classes_by_file_name: false

    - name: cobertura-report
      uses: 5monkeys/cobertura-action@v12
      if: always() && github.actor != 'dependabot[bot]'
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        path: '**/coverage.xml'
        minimum_coverage: 5

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        path: |
            **/target/*.war 
            *.sql 
            IaC/**/*.*
        name: ${{ env.artifactsName }}

  pr: 
    if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'

    runs-on: ubuntu-latest
    name: deploy PR ephemeral environment

    environment:
      # If you change this, you also need to update the pr-closed.yml workflow
      name: pull-request-${{ github.event.pull_request.number }}
      url: ${{ steps.deployWebApp.outputs.webapp-url }}/myshuttledev

    # WARNING: If you change some of these values you also need to update the pr-closed workflow
    env:
      ResourceGroupName: MyShuttle-${{ github.event.repository.id }}-pr

    needs: [build]
    
    steps:
      - run: |
          dbPassword=$(</dev/urandom tr -dc '1234567890!*%@#$%abcdefghijklmnopqrstuvxzABCDEFGHIJKLMNOPQRSTUVXZ' | head -c20)
          dbPassword=$dbPassword$(</dev/urandom tr -dc '!*%@#$%' | head -c4)
          echo "dbPassword=$dbPassword" >> $GITHUB_ENV
          echo "::add-mask::$dbPassword"
        name: generate random db password

      - run: |
          prNumber=${{github.event.pull_request.number}}
          echo "ResourceGroupName=${{ env.ResourceGroupName }}-$prNumber" >> $GITHUB_ENV 
          
          # WARNING: if you change this, you also need to keep pr-closed workflow in sync
          echo "SiteName=${{ env.SiteName }}-pr$prNumber" >> $GITHUB_ENV 
          echo "dbServerName=${{ env.dbServerName }}-pr$prNumber" >> $GITHUB_ENV           
          echo "prNumber=$prNumber" >> $GITHUB_ENV 
        name: update variables for dynamic environment

      # we need the local actions and integration tests
      - uses: actions/checkout@v2

      - uses: ./actions/provision-and-deploy
        id: deployWebApp
        with:
          dbServerName: ${{ env.dbServerName }}
          dbUser: ${{ env.dbUser }}
          dbPassword: ${{ env.dbPassword }}
          ResourceGroupName: ${{ env.ResourceGroupName }}
          artifactsName: ${{ env.artifactsName }}
          SiteName: ${{ env.SiteName }}
          AzureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: add comment to PR with environment info
        uses: marocchino/sticky-pull-request-comment@v2
        if: always()
        with:
          header: url
          message: |
            :loudspeaker: We created an ephemeral environment (webapp+db) so you can test the deploy for [my shuttle pr ${{env.prNumber}}](${{ steps.deployWebApp.outputs.webapp-url }}/myshuttledev)

            You can also track the deployments for this environment in [Pull request ${{ github.event.pull_request.number }} environment](/${{github.repository}}/deployments/activity_log?environment=pull-request-${{ github.event.pull_request.number }})

            Don't worry we will delete it once this Pull request is closed. :fire:

  analyze:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
 
    if: github.actor != 'dependabot[bot]'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: java
        queries: +security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  armscan:
    name: ARM template scanning
    
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'

    steps:
      - name: Test ARM Templates - path
        id: pathtest
        uses: aliencube/arm-ttk-actions@v0.3
        with:
          path: ./IaC

      - name: Test result - path
        shell: bash
        continue-on-error: true
        run: |
          echo '${{ toJSON(fromJSON(steps.pathtest.outputs.results)) }}'

  containerscan:
    name: container scanning
    
    runs-on: ubuntu-latest

    if: github.actor != 'dependabot[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package cobertura:cobertura --file pom.xml -DskipITs --batch-mode --quiet

      - name: Build an image from Dockerfile
        run: |
          docker build -t ghcr.io/myshuttle:${{ github.sha }} . -f src/Dockerfile

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/myshuttle:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - uses: actions/upload-artifact@v1
        with:
          path: 'trivy-results.sarif'
          name: trivy

      # Use a category so we can upload more than one file per job
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

      - name: Anchore scan
        id: anchore-scan
        uses: anchore/scan-action@v3
        with:
          image: "ghcr.io/myshuttle:${{ github.sha }}"
          acs-report-enable: true
          fail-build: false
          severity-cutoff: low
          
      - uses: actions/upload-artifact@v1
        with:
          path: '${{ steps.anchore-scan.outputs.sarif }}'
          name: anchore

      # Use a category so we can upload more than one file per job
      - name: Upload Anchore Scan Report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.anchore-scan.outputs.sarif }}
          category: anchore

  dev:
    if: github.ref == 'refs/heads/demos/main' 

    name: deploy to DEV
    runs-on: ubuntu-latest
    concurrency: dev

    environment:
      name: DEV
      url: ${{ steps.deployWebApp.outputs.webapp-url }}/myshuttledev

    needs: [build]

    steps:
    # we need the local actions and integration tests
    - uses: actions/checkout@v2

    - uses: ./actions/provision-and-deploy
      id: deployWebApp
      with:
        dbServerName: ${{ env.dbServerName }}
        dbUser: ${{ env.dbUser }}
        dbPassword: ${{ secrets.dbPassword_dev }}
        ResourceGroupName: ${{ env.ResourceGroupName }}
        artifactsName: ${{ env.artifactsName }}
        SiteName: ${{ env.SiteName }}
        AzureCredentials: ${{ secrets.AZURE_CREDENTIALS }}

  qa:
    if: github.ref == 'refs/heads/demos/main' 

    name: deploy to QA
    runs-on: ubuntu-latest
    concurrency: qa
    
    environment:
      name: QA
      url: ${{ steps.deployWebApp.outputs.webapp-url }}/myshuttledev

    needs: [dev]

    steps:
    # we need the local actions and integration tests
    - uses: actions/checkout@v2

    - uses: ./actions/provision-and-deploy
      id: deployWebApp
      with:
        dbServerName: ${{ env.dbServerName }}
        dbUser: ${{ env.dbUser }}
        dbPassword: ${{ secrets.dbPassword_dev }}
        ResourceGroupName: ${{ env.ResourceGroupName }}
        artifactsName: ${{ env.artifactsName }}
        SiteName: ${{ env.SiteName }}
        AzureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
